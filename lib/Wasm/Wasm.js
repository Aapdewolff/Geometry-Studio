class Wasm {
    static #base64_ = "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";

    static #charLookup_ = new Uint8Array(256);
    static #chars_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    static #exports_;

    static async init(callback) {
        for (let i = 0; i < Wasm.#chars_.length; i++) {
            Wasm.#charLookup_[Wasm.#chars_.charCodeAt(i)] = i;
        }

        const bin = Wasm.#decode(Wasm.#base64_);
        const mem = new WebAssembly.Memory({initial: 1});
        const instance = await WebAssembly.instantiate(bin, {
            env: {
                abort(_msg, _file, line, column) {
                    console.error("abort called at index.ts: (" + line + ":" + column + ")");
                },
                memory: mem
            }
        });

        Wasm.#exports_ = instance.instance.exports;
        callback();
    }
    
    static get exports() { return Wasm.#exports_; }
    static set exports(value) { console.error("Wasm.exports is readonly!"); }

    static #decode(base64) {
        var bufferLength = base64.length * 0.75,
            len = base64.length, i, p = 0,
            encoded1, encoded2, encoded3, encoded4;
        
        if (base64[base64.length - 1] === "=") {
            bufferLength--;
            if (base64[base64.length - 2] === "=") {
              bufferLength--;
            }
        }
        
        var arraybuffer = new ArrayBuffer(bufferLength);
        var bytes = new Uint8Array(arraybuffer);
        
        for (i = 0; i < len; i += 4) {
          encoded1 = Wasm.#charLookup_[base64.charCodeAt(i)];
          encoded2 = Wasm.#charLookup_[base64.charCodeAt(i + 1)];
          encoded3 = Wasm.#charLookup_[base64.charCodeAt(i + 2)];
          encoded4 = Wasm.#charLookup_[base64.charCodeAt(i + 3)];
        
          bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
          bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
          bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        
        return arraybuffer;
    }
}